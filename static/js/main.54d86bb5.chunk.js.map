{"version":3,"sources":["redux/actionTypes.js","components/add-grid/add-grid-component.jsx","redux/actions.js","components/grid-item/grid-item.component.jsx","components/display-grid/display-grid.component.jsx","App.js","reportWebVitals.js","redux/reducers/grid-utils.js","redux/reducers/gridReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["ADD_GRID","GENERATE_GRID","REMOVE_ITEM","ADD_ITEM","AddGrid","props","handleSubmit","evt","preventDefault","count","parseInt","grid","totalWidthGrid","state","columnWidth","length","setState","err","addGrid","text","updateInput","id","displayButton","onSubmit","this","className","style","color","type","min","max","value","placeholder","onChange","e","target","disabled","error","React","Component","connect","dispatch","item","payload","parser","docNode","htmlElm","htmlElement","json","useState","exportContent","setExportContent","rendergridHTML","map","idx","gridColumnEnd","height","border","onExporting","dataType","ReactDOMServer","renderToStaticMarkup","treeObject","window","DOMParser","parseFromString","firstChild","treeHTML","element","object","nodeName","nodeList","childNodes","i","nodeType","push","nodeValue","attributes","JSON","stringify","mapDOM","onClick","addItem","removeItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","removeGridItem","items","itemToRemove","remaining","filter","extraWidthToAdd","leftOver","Math","round","floor","addGridItem","itemToAdd","modifiedItems","newItemToAdd","Date","getTime","gridAreaRemaining","newGridAdded","initialState","updatedGrid","gridReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54d86bb5.chunk.js","sourcesContent":["export const ADD_GRID = 'ADD_GRID';\nexport const GENERATE_GRID = 'GENERATE_GRID';\nexport const TOTAL_WIDTH_GRID = 'TOTAL_WIDTH_GRID';\nexport const REMOVE_ITEM = 'REMOVE_ITEM';\nexport const ADD_ITEM = 'ADD_ITEM';\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addGrid } from '../../redux/actions';\nimport './add-grid.styles.scss';\n\nclass AddGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidth: '',\n      text: '',\n      err: false,\n      id: '',\n      displayButton: true,\n    };\n  }\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    let count =\n      parseInt(this.props.grid.totalWidthGrid) +\n      parseInt(this.state.columnWidth);\n    if (this.state.columnWidth.length === 0 || count > 12) {\n      this.setState({ err: true });\n      return;\n    }\n    this.props.addGrid(this.state);\n    this.setState({ columnWidth: '', text: '', err: false });\n  };\n\n  updateInput = (text) => {\n    this.setState({ text });\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} className=\"grid-form\">\n          <label>Grid Generator:</label>\n          {this.state.err ? (\n            <span style={{ color: 'red' }}>\n              Grid column width is invalid. It cannot be added or total width is\n              already reached maximum of 12\n            </span>\n          ) : (\n            ''\n          )}\n          <br />\n          <input\n            className=\"columnWidth\"\n            type=\"number\"\n            min=\"1\"\n            max=\"12\"\n            value={this.state.columnWidth}\n            placeholder=\"Grid Column Width between 1 - 12\"\n            onChange={(e) => this.setState({ columnWidth: e.target.value })}\n          />\n          <input\n            type=\"text\"\n            value={this.state.text}\n            placeholder=\"Fill out the text for the grid *optional\"\n            onChange={(e) => this.setState({ text: e.target.value })}\n          />\n\n          <input\n            type=\"submit\"\n            value=\"Add Grid\"\n            className=\"form-btn\"\n            disabled={this.props.grid.totalWidthGrid === 12}\n          />\n        </form>\n        <span className=\"error\">\n          {this.props.grid.error ? this.props.grid.error : ''}\n        </span>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addGrid: (item) => dispatch(addGrid(item)),\n});\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGrid);\n","import { ADD_GRID, GENERATE_GRID, REMOVE_ITEM, ADD_ITEM } from './actionTypes';\n\nexport const addGrid = (widthAndText) => ({\n  type: ADD_GRID,\n  payload: widthAndText,\n});\nexport const generateGrid = () => ({\n  type: GENERATE_GRID,\n});\nexport const removeItem = (item) => ({\n  type: REMOVE_ITEM,\n  payload: item,\n});\nexport const addItem = (item) => ({\n  type: ADD_ITEM,\n  payload: item,\n});\n","import React, { useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport { connect } from 'react-redux';\nimport './grid-item.styles.scss';\n\nconst GridItem = (props) => {\n  const { grid } = props.grid;\n  const [exportContent, setExportContent] = useState(null);\n  let parser, docNode, htmlElm, htmlElement, json;\n\n  function rendergridHTML() {\n    return grid.map((item, idx) => {\n      return (\n        <div\n          key={idx}\n          style={{\n            gridColumnEnd: `span ${item.columnWidth}`,\n            height: 'auto',\n            border: '1px solid #777',\n          }}\n        >\n          <div className=\"text-wrapper\">\n            <h5>Column</h5>\n            <div>Width:{item.columnWidth}</div>\n            <div className=\"text\">\n              {item.text ? item.text : `Column ${parseInt(idx) + 1}`}\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  function mapDOM(htmlElement, json) {\n    var treeObject = {};\n\n    // If string convert to document Node\n    if (typeof htmlElement === 'string') {\n      if (window.DOMParser) {\n        parser = new DOMParser();\n        docNode = parser.parseFromString(htmlElement, 'text/xml');\n      }\n      htmlElement = docNode.firstChild;\n    }\n\n    //Recursively loop through DOM elements and assign properties to object\n    function treeHTML(element, object) {\n      object['type'] = element.nodeName;\n      var nodeList = element.childNodes;\n      if (nodeList != null) {\n        if (nodeList.length) {\n          object['content'] = [];\n          for (var i = 0; i < nodeList.length; i++) {\n            var num = parseInt(nodeList[i].nodeType, 10);\n            if (num === 3) {\n              object['content'].push(nodeList[i].nodeValue);\n            } else {\n              object['content'].push({});\n              treeHTML(\n                nodeList[i],\n                object['content'][object['content'].length - 1]\n              );\n            }\n          }\n        }\n      }\n      if (element.attributes != null) {\n        if (element.attributes.length) {\n          object['attributes'] = {};\n          for (let i = 0; i < element.attributes.length; i++) {\n            object['attributes'][element.attributes[i].nodeName] =\n              element.attributes[i].nodeValue;\n          }\n        }\n      }\n    }\n    treeHTML(htmlElement, treeObject);\n\n    return json ? JSON.stringify(treeObject) : treeObject;\n  }\n\n  function onExporting(dataType) {\n    htmlElm = rendergridHTML();\n    htmlElement = ReactDOMServer.renderToStaticMarkup(htmlElm);\n    if (dataType === 'html') {\n      setExportContent(htmlElement);\n      return htmlElement;\n    } else if (dataType === 'json') {\n      json = mapDOM(htmlElement, true);\n      setExportContent(json);\n      return json;\n    }\n  }\n\n  return (\n    <div className=\"container-wrapper\">\n      <div className=\"container\">\n        <p>Grid</p>\n        <div className=\"row\">{rendergridHTML()}</div>\n      </div>\n\n      <input\n        onClick={() => onExporting('html')}\n        type=\"submit\"\n        value=\"Export HTML\"\n        className=\"export-html-btn\"\n        disabled={!props.grid.totalWidthGrid === 12}\n      />\n      <input\n        onClick={() => onExporting('json')}\n        type=\"submit\"\n        value=\"Export JSON\"\n        className=\"export-json-btn\"\n        disabled={!props.grid.totalWidthGrid === 12}\n      />\n      <div className=\"export-content-wrapper\">{exportContent}</div>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  const { grid } = state;\n  return { grid };\n};\nexport default connect(mapStateToProps)(GridItem);\n","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { addItem, removeItem } from '../../redux/actions';\nimport GridItem from '../grid-item/grid-item.component';\nimport './display-grid.styles.scss';\n\nconst DisplayGrid = (props) => {\n  const { grid } = props.grid;\n\n  function renderList() {\n    return grid.map((item) => {\n      return (\n        <li key={item.id} className=\"list-item\">\n          <div className=\"remove-button\" onClick={() => props.removeItem(item)}>\n            &#10005;\n          </div>\n          <div className=\"add-button\" onClick={() => props.addItem(item)}>\n            &#10003;\n          </div>\n          <span className=\"column-width\">\n            Column Width: <b>{item.columnWidth}</b>\n          </span>\n\n          {item.text.length > 0 ? `And Text is:  ${item.text}` : ''}\n        </li>\n      );\n    });\n  }\n\n  return (\n    <>\n      <ul className=\"grid\"> {renderList()} </ul>\n      {props.grid.totalWidthGrid === 12 ? <GridItem /> : ''}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return state;\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addItem: (item) => dispatch(addItem(item)),\n  removeItem: (item) => dispatch(removeItem(item)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayGrid);\n","import React from 'react';\n\nimport AddGrid from './components/add-grid/add-grid-component';\nimport DisplayGrid from './components/display-grid/display-grid.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddGrid />\n      <DisplayGrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const removeGridItem = (items, itemToRemove) => {\n  const remaining = items.grid.filter((item) => {\n    return item.id !== itemToRemove.id;\n  });\n\n  let gap = parseInt(itemToRemove.columnWidth);\n  let extraWidthToAdd = gap / remaining.length;\n  let leftOver = 0;\n  if (extraWidthToAdd > 0) {\n    if (Math.round(extraWidthToAdd) !== extraWidthToAdd) {\n      leftOver = 1;\n    }\n    extraWidthToAdd = Math.floor(extraWidthToAdd);\n  }\n  const output = remaining.map((item, idx) => {\n    item.columnWidth = parseInt(item.columnWidth) + extraWidthToAdd;\n    if (idx + 1 === remaining.length) {\n      item.columnWidth = parseInt(item.columnWidth) + leftOver;\n    }\n    return item;\n  });\n  return output;\n};\n\n/////////////////////////////\nexport const addGridItem = (items, itemToAdd) => {\n  let modifiedItems = [...items.grid];\n  let newItemToAdd = { ...itemToAdd };\n  newItemToAdd.id = new Date().getTime();\n  let gridAreaRemaining = 12 - parseInt(itemToAdd.columnWidth);\n  let newGridAdded = parseInt(itemToAdd.columnWidth);\n\n  //Check if the remaining area is possible to add\n  if (\n    itemToAdd.columnWidth === '12' ||\n    gridAreaRemaining < modifiedItems.length\n  ) {\n    return items.grid;\n  }\n\n  while (newGridAdded > 0) {\n    for (let i = 0; i < modifiedItems.length; i++) {\n      if (modifiedItems[i].columnWidth < 1) {\n        break;\n      }\n      if (parseInt(modifiedItems[i].columnWidth) !== 1 && newGridAdded !== 0) {\n        modifiedItems[i].columnWidth -= 1;\n        newGridAdded--;\n      }\n      if (newGridAdded === 0) break;\n    }\n  }\n\n  return [...modifiedItems, newItemToAdd];\n};\n","import { ADD_GRID, GENERATE_GRID, REMOVE_ITEM, ADD_ITEM } from '../actionTypes';\nimport { removeGridItem, addGridItem } from './grid-utils';\n\nconst initialState = {\n  grid: [],\n  totalWidthGrid: 0,\n  updatedGrid: false,\n};\n\nconst gridReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_GRID: {\n      action.payload.id = new Date().getTime();\n      return {\n        ...state,\n        grid: [...state.grid, action.payload],\n        totalWidthGrid:\n          state.totalWidthGrid + parseInt(action.payload.columnWidth),\n      };\n    }\n    case GENERATE_GRID: {\n      return {\n        ...state,\n        grid: [...state.grid, action.payload],\n      };\n    }\n\n    case REMOVE_ITEM: {\n      if (state.grid.columnWidth === '12' || state.grid.length === 1) {\n        return {\n          ...state,\n          error: 'Cannot remove the last element',\n          updatedGrid: false,\n        };\n      } else {\n        return {\n          ...state,\n          error: '',\n          grid: removeGridItem(state, action.payload),\n        };\n      }\n    }\n\n    case ADD_ITEM: {\n      return {\n        ...state,\n        grid: addGridItem(state, action.payload),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default gridReducer;\n","import { combineReducers } from 'redux';\n\nimport gridReducer from './gridReducer';\n\nexport default combineReducers({\n  grid: gridReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\n\nimport rootReducer from './reducers';\n\nconst middlewares = [];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}